{
	"info": {
		"_postman_id": "7e7a4657-d107-46c3-9b94-08dc536bd899",
		"name": "Issue GitHub",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27788922"
	},
	"item": [
		{
			"name": "Create an issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"issues_number\", jsonData.number);\r",
							"pm.environment.set(\"issuesid\", jsonData.node_id);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Issue 1\",\r\n    \"body\": \"Something went wrong\",\r\n    \"assignee\": \"MaksKo29\",\r\n    \"labels\": [\r\n        \"bug\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/MaksKo29/Issues/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"MaksKo29",
						"Issues",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"    <table>\r",
							"         <thead>\r",
							"             <tr>\r",
							"                 <th>number</th>\r",
							"                 <th>title</th>\r",
							"                 <th>body</th>\r",
							"             </tr>\r",
							"         </thead>  \r",
							"         {{#each response}}\r",
							"             <tr>\r",
							"                 <td>{{number}}</td>\r",
							"                 <td>{{title}}</td>\r",
							"                 <td>{{body}}</td>\r",
							"             </tr>\r",
							"         {{/each}}\r",
							"    </table>\r",
							"`;\r",
							"\r",
							"pm.visualizer.set(template, { response: pm.response.json() })\r",
							"\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Created issue with body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].title).to.eql(\"Issue 1\");\r",
							"    pm.expect(jsonData[0].labels[0].description).to.eql(\"Something isn't working\");\r",
							"    pm.expect(jsonData[0].assignee.login).to.eql(\"MaksKo29\");\r",
							"    pm.expect(jsonData[0].labels[0].name).to.eql(\"bug\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/MaksKo29/Issues/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"MaksKo29",
						"Issues",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"The name has been changed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.title).to.eql(\"Issue 2\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Issue 2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/MaksKo29/Issues/issues/{{issues_number}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"MaksKo29",
						"Issues",
						"issues",
						"{{issues_number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  deleteIssue(input: { issueId: \"{{issuesid}}\"}) { \r\n    clientMutationId\r\n  } \r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "https://api.github.com/graphql",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"    <table>\r",
							"         <thead>\r",
							"             <tr>\r",
							"                 <th>number</th>\r",
							"                 <th>title</th>\r",
							"                 <th>body</th>\r",
							"             </tr>\r",
							"         </thead>  \r",
							"         {{#each response}}\r",
							"             <tr>\r",
							"                 <td>{{number}}</td>\r",
							"                 <td>{{title}}</td>\r",
							"                 <td>{{body}}</td>\r",
							"             </tr>\r",
							"         {{/each}}\r",
							"    </table>\r",
							"`;\r",
							"\r",
							"pm.visualizer.set(template, { response: pm.response.json() })\r",
							"\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Issue deleted\", function () {\r",
							"  var expectedString = \"{{issuesid}}\";\r",
							"  var responseBody = pm.response.text();\r",
							"  pm.expect(responseBody).not.to.contain(expectedString);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/MaksKo29/Issues/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"MaksKo29",
						"Issues",
						"issues"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		}
	]
}